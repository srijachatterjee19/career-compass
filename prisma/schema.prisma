generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password_hash String
  display_name  String
  role          String        @default("user")
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  cover_letters CoverLetter[]
  jobs          Job[]
  resumes       Resume[]

  @@map("users")
}

model Job {
  id                  Int           @id @default(autoincrement())
  user_id             Int
  title               String
  company             String
  description         String?
  status              String        @default("applied")
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  location            String?
  salary_max          Int?
  salary_min          Int?
  url                 String?
  application_date    DateTime?
  company_description String?
  deadline            DateTime?
  notes               String?
  referrals           String?
  role_details        String?
  cover_letters       CoverLetter[]
  user                User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  resumes             Resume[]

  // Database indexes for better search performance
  @@index([user_id, status])
  @@index([user_id, company])
  @@index([user_id, title])
  @@index([user_id, location])
  @@index([user_id, application_date])
  @@index([user_id, deadline])
  @@index([user_id, salary_min, salary_max])
  @@index([user_id, created_at])
  
  @@map("jobs")
}

model Resume {
  id            Int           @id @default(autoincrement())
  user_id       Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  is_active     Boolean       @default(true)
  job_id        Int?
  version       Int           @default(1)
  achievements  Json?
  education     Json?
  experience    Json?
  name          String
  projects      Json?
  skills        Json?
  summary       String?
  cover_letters CoverLetter[]
  job           Job?          @relation(fields: [job_id], references: [id])
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("resumes")
}

model CoverLetter {
  id              Int      @id @default(autoincrement())
  user_id         Int
  title           String
  content         String
  job_id          Int?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  resume_id       Int?
  version         Int      @default(1)
  company_name    String?
  job_description String?
  job_title       String?
  resume_snippet  String?
  job             Job?     @relation(fields: [job_id], references: [id])
  resume          Resume?  @relation(fields: [resume_id], references: [id])
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("cover_letters")
}
